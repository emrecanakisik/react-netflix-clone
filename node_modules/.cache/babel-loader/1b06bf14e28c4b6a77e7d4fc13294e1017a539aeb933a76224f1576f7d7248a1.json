{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emrec\\\\Desktop\\\\react-netflix-clone\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport GetStarted from \"./pages/GetStarted-Login/GetStarted\";\nimport Login from \"./pages/GetStarted-Login/Login\";\nimport { Routes, Route, useNavigate } from \"react-router-dom\";\nimport { getStartedPageLang } from \"./contexts/GetStartedLangContext\";\nimport { loginPageLang } from \"./contexts/LoginLangContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isLang, setIsLang] = useState(\"English\");\n  const [GSLang, setGSLang] = useState(getStartedPageLang.english);\n  const [LoginLang, setLoginLang] = useState(loginPageLang.english);\n  const navigate = useNavigate();\n\n  /*  useEffect(() => {\n    navigate(\"/nl-en\");\n  }, []); */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        path: GSLang.link,\n        element: /*#__PURE__*/_jsxDEV(GetStarted, {\n          isLang: isLang,\n          setIsLang: setIsLang,\n          GSLang: GSLang,\n          setGSLang: setGSLang,\n          loginLang: LoginLang,\n          setLoginLang: setLoginLang\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/login\",\n          element: /*#__PURE__*/_jsxDEV(Login, {\n            isLang: isLang,\n            setIsLang: setIsLang,\n            GSLang: GSLang,\n            setGSLang: setGSLang,\n            loginLang: LoginLang,\n            setLoginLang: setLoginLang\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"MX+uh6GfcEmOd/O2D4PaVpTLoec=\", false, function () {\n  return [useNavigate];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","GetStarted","Login","Routes","Route","useNavigate","getStartedPageLang","loginPageLang","jsxDEV","_jsxDEV","App","_s","isLang","setIsLang","GSLang","setGSLang","english","LoginLang","setLoginLang","navigate","children","path","link","element","loginLang","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/emrec/Desktop/react-netflix-clone/src/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport GetStarted from \"./pages/GetStarted-Login/GetStarted\";\nimport Login from \"./pages/GetStarted-Login/Login\";\nimport { Routes, Route, Link, NavLink, useNavigate } from \"react-router-dom\";\nimport GSLangContProv, {\n  getStartedPageLang,\n} from \"./contexts/GetStartedLangContext\";\nimport { loginPageLang } from \"./contexts/LoginLangContext\";\n\nfunction App() {\n  const [isLang, setIsLang] = useState(\"English\");\n  const [GSLang, setGSLang] = useState(getStartedPageLang.english);\n  const [LoginLang, setLoginLang] = useState(loginPageLang.english);\n  const navigate = useNavigate();\n\n  /*  useEffect(() => {\n    navigate(\"/nl-en\");\n  }, []); */\n\n  return (\n    <div>\n      <Routes>\n        <Route\n          path={GSLang.link}\n          element={\n            <GetStarted\n              isLang={isLang}\n              setIsLang={setIsLang}\n              GSLang={GSLang}\n              setGSLang={setGSLang}\n              loginLang={LoginLang}\n              setLoginLang={setLoginLang}\n            />\n          }\n        >\n          <Route\n            path=\"/login\"\n            element={\n              <Login\n                isLang={isLang}\n                setIsLang={setIsLang}\n                GSLang={GSLang}\n                setGSLang={setGSLang}\n                loginLang={LoginLang}\n                setLoginLang={setLoginLang}\n              />\n            }\n          />\n        </Route>\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAmB,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,qCAAqC;AAC5D,OAAOC,KAAK,MAAM,gCAAgC;AAClD,SAASC,MAAM,EAAEC,KAAK,EAAiBC,WAAW,QAAQ,kBAAkB;AAC5E,SACEC,kBAAkB,QACb,kCAAkC;AACzC,SAASC,aAAa,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,SAAS,CAAC;EAC/C,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAACM,kBAAkB,CAACU,OAAO,CAAC;EAChE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAACO,aAAa,CAACS,OAAO,CAAC;EACjE,MAAMG,QAAQ,GAAGd,WAAW,EAAE;;EAE9B;AACF;AACA;;EAEE,oBACEI,OAAA;IAAAW,QAAA,eACEX,OAAA,CAACN,MAAM;MAAAiB,QAAA,eACLX,OAAA,CAACL,KAAK;QACJiB,IAAI,EAAEP,MAAM,CAACQ,IAAK;QAClBC,OAAO,eACLd,OAAA,CAACR,UAAU;UACTW,MAAM,EAAEA,MAAO;UACfC,SAAS,EAAEA,SAAU;UACrBC,MAAM,EAAEA,MAAO;UACfC,SAAS,EAAEA,SAAU;UACrBS,SAAS,EAAEP,SAAU;UACrBC,YAAY,EAAEA;QAAa;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAE9B;QAAAR,QAAA,eAEDX,OAAA,CAACL,KAAK;UACJiB,IAAI,EAAC,QAAQ;UACbE,OAAO,eACLd,OAAA,CAACP,KAAK;YACJU,MAAM,EAAEA,MAAO;YACfC,SAAS,EAAEA,SAAU;YACrBC,MAAM,EAAEA,MAAO;YACfC,SAAS,EAAEA,SAAU;YACrBS,SAAS,EAAEP,SAAU;YACrBC,YAAY,EAAEA;UAAa;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAE9B;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MACD;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACI;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACL;AAEV;AAACjB,EAAA,CA3CQD,GAAG;EAAA,QAIOL,WAAW;AAAA;AAAAwB,EAAA,GAJrBnB,GAAG;AA6CZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}